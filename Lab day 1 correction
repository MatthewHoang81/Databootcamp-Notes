/*select * from player_seasons
create type season_stats as (
	season integer,
	gp integer,
	pts real,
	reb real,
	ast real)
	
create type scoring_class as enum('star','good','average','bad');
	
	
create table players (
	player_name text,
	height text,
	college text,
	country text,
	draft_year text,
	draft_round text,
	draft_number text,
	season_stats season_stats[],
	scoring_class scoring_class,
	years_since_last_season INTEGER,
	current_season Integer,
	is_active BOOLEAN,
	primary key (player_name, current_season))
	
	* DROP table players
	*
	*/
	

	--select MIN(SEASON) from player_seasons ps 
	/*insert into players
	with yesterday as (
	select * from players
	where current_season = 2000),
	today as (
	select * from player_seasons ps where season = 2001
	)
	*/
	
	insert into players
	with years as (
	select *
	 from generate_series(1996,2022) as season
	),
		p as (
			select player_name,MIN(season) as first_season
			from player_seasons 
			group by player_name 
		),
		players_and_seasons as (
			select *
			from p
				join years y on p.first_season <= y.season
		),
		windowed as (
			select ps.player_name,
				   ps.season,
				   array_remove(
				   array_agg(case 
				   when ps.season is not null then
				   row(ps.season,
				   ps.gp,
				   ps.pts,
				   ps.reb,
				   ps.ast
				   )::season_stats 
				   end)
				   over (partition by pas.player_name 
				   order by coalesce(pas.season,ps.season)),
				   null)
				   as seasons
				   from players_and_seasons pas
				   left join player_seasons ps
				   on pas.player_name = ps.player_name
				   and pas.season = ps.season
				  order by pas.player_name, pas.season
				  ), static as (
				   select 
				   player_name,
				   MAX(height) as height,
				   MAX(college) as college,
				   max(country) as country,
				   MAX(draft_year) as draft_year,
				   MAX(draft_round) as draft_round,
				   MAX (draft_number) as draft_number
				  from player_seasons
				  group by player_name
				  )
				  
				  select 
				  	w.player_name,
				  	s.height,
				  	s.college,
				  	s.country,
				  	s.draft_year,
				  	s.draft_round,
				  	s.draft_number,
				  	seasons as season_stats,
				  	case 
when (seasons[cardinality(seasons)]::season_stats).pts > 20 then 'star'
when (seasons[cardinality(seasons)]::season_stats).pts > 15 then 'good'
when (seasons[cardinality(seasons)]::season_stats).pts > 10 then 'average'
else 'bad'
					end::scoring_class as scoring_class,
w.season - (seasons[cardinality(seasons)]::season_stats).season as years_since_last_active,
				  	w.season,
(seasons[cardinality(seasons)]::season_stats).season = season as is_active
				  	from windowed w
				  	join static s
				  	on w.player_name = s.player_name;
		
				  
				  
	/*			  
	select 
	coalesce(t.player_name,
	y.player_name) as player_name,
	coalesce(t.height,
	y.height) as height,
	coalesce(t.college,
	y.college) as college,
	coalesce(t.country,
	y.country) as country,
	coalesce(t.draft_year,
	y.draft_year) as draft_year,
	coalesce(t.draft_round,
	y.draft_round) as draft_round,
	coalesce(t.draft_number,
	y.draft_number) as draft_number,
	case
		when y.season_stats is null
	then array[row(
	t.season,
		t.gp,
		t.pts,
		t.reb,
		t.ast
	)::season_stats]
		when t.season is not null then y.season_stats || array[row(
	t.season,
		t.gp,
		t.pts,
		t.reb,
		t.ast
	)::season_stats]
		else y.season_stats
	end as season_stats,
	case when t.season is not null then 
	case when t.pts > 20 then 'star'
	when t.pts > 15 then 'good'
	when t.pts > 10 then 'average'
	else 'bad'
		end::scoring_class
		else y.scoring_class
		end as scoring_class,
	case when t.season is not null then 0
	else coalesce(y.years_since_last_season,0)+1
	end as years_since_last_season,
	coalesce(t.season,
	y.current_season + 1) as current_season
from
	today t
full outer join yesterday y
	on
	t.player_name = y.player_name;

select player_name,
(season_stats[cardinality(season_stats)]::season_stats).pts /
case when (season_stats[1]::season_stats).pts = 0 then 1
else (season_stats[1]::season_stats).pts
end

from players 
where current_season = 2001
and scoring_class = 'star'
order by 2 desc
*/
/*
select * from players

where current_season = 2001

drop table players;


with unnested as (
select 	player_name,
		unnest(season_stats)::season_stats as season_stats
	from players 
	where current_season = 2001
--and player_name = 'Michael Jordan'
)


select 	player_name, 
		(season_stats::season_stats).*
from unnested
