create type films as (
	film text,
	votes integer,
	rating real,
	filmid text)

create type quality_class as 
	enum('star','good','average','bad');

create table actors(
	actor_name text,
	actorid text,
	year text,
	films films[],
	quality_class quality_class,
	years_since_last_film integer,
	current_year integer,
	is_active boolean,
	primary key (actorid, current_year));


insert into actors
	with last_year as (
	select * from actors
	where current_year = 1969),
	current_year as (
	select actor,
	actorid,
	year,
	CASE 
	WHEN year IS NULL THEN array[]::films[]
    ELSE ARRAY_AGG(ROW(
    film, votes, rating, filmid)::films)
    end as films,
    case when 
	AVG(rating)	> 8 then 'star'
	when 
	AVG(rating) > 7 
	and AVG(rating) <= 8 then 'good'
	when 
	AVG(rating) > 6
	and AVG(rating) <= 7 then 'average'
	when 
	AVG(rating) > 6
	and AVG(rating) <= 7 then 'bad'
	else NULL
		end::quality_class
		as quality_class
	from actor_films ps where year = 1970
	group by actor,
	actorid,
	year
	)
	
select 
	coalesce(t.actor,
	y.actor_name) as actor,
	coalesce(t.actorid,
	y.actorid) as actorid,
	coalesce(t.year,
	y.current_year) as current_year,
	case
		when y.films is null
	then t.films
		when t.films is not null 
		then y.films
		else y.films
	end as films,
	coalesce(t.quality_class,
	y.quality_class) as quality_class,
	case when t.year is not null then 0
	else coalesce(y.years_since_last_film,0)+1
	end as years_since_last_film,
	coalesce(t.year,
	y.current_year + 1) as current_year,
	case when t.actorid is not null then 
	true 
	else false 
	end as is_active
from
	current_year t
full outer join last_year y
	on
	t.actorid = y.actorid;

select * from Actors


create table actor_history_scd(
	actor_name text,
	quality_class quality_class,
	is_active BOOLEAN,
	current_year integer,
	start_date integer,
	end_date integer,
	primary key (actor_name, start_date)
);

WITH actors_with_changes AS (
    SELECT 
        actor_name,
        current_year,
        quality_class,
        is_active,
        LAG(quality_class) OVER 
        (PARTITION BY actorid 
        ORDER BY current_year) AS prev_quality_class,
        LAG(is_active) OVER 
        (PARTITION BY actorid 
        ORDER BY current_year) AS prev_is_active
    FROM actors
),
change_indicators AS (
    SELECT 
        actor_name,
        current_year,
        quality_class,
        is_active,
        CASE 
            WHEN quality_class 
            <> prev_quality_class 
            OR is_active <> prev_is_active 
            THEN 1 
            ELSE 0 
        END AS change_indicator
    FROM actors_with_changes
),
streak_groups AS (
    SELECT 
        actor_name,
        current_year,
        quality_class,
        is_active,
        SUM(change_indicator) OVER 
        (PARTITION BY actor_name 
        ORDER BY current_year) AS change_group
    FROM change_indicators
),
grouped_history AS (
    SELECT 
        actor_name,
        quality_class,
        is_active,
        MIN(current_year) AS start_date,
        MAX(current_year) AS end_date
    FROM streak_groups
    GROUP BY actor_name, quality_class, is_active, change_group
)
INSERT INTO actor_history_scd 
(actor_name, 
quality_class, 
is_active, 
start_date, 
end_date)
SELECT 
    actor_name,
    quality_class,
    is_active,
    start_date,
    end_date
FROM grouped_history;

WITH last_scd_records AS (
    SELECT 
        actor_name,
        quality_class,
        is_active,
        start_date,
        end_date
    FROM actor_history_scd
    WHERE end_date = (SELECT MAX(end_date) 
    FROM actor_history_scd)
),
current_year_data AS (
    SELECT 
        actor_name,
        current_year AS year,
        quality_class,
        is_active
    FROM actors
    WHERE current_year = (SELECT MAX(current_year) FROM actors)
),
unchanged_records AS (
    SELECT 
        l.actor_name,
        l.quality_class,
        l.is_active,
        l.start_date,
        c.year AS end_year
    FROM last_scd_records l
    JOIN current_year_data c
        ON l.actor_name = c.actor_name
       AND l.quality_class = c.quality_class
       AND l.is_active = c.is_active
),
changed_records AS (
    SELECT 
        l.actor_name,
        l.quality_class,
        l.is_active,
        l.start_date,
        l.end_date -- Old record, closed.
    FROM last_scd_records l
    JOIN current_year_data c
        ON l.actor_name = c.actor_name
       AND (l.quality_class <> c.quality_class 
       OR l.is_active <> c.is_active)
    UNION ALL
    SELECT 
        c.actor_name,
        c.quality_class,
        c.is_active,
        c.year AS start_date,
        c.year AS end_date 
    FROM last_scd_records l
    JOIN current_year_data c
        ON l.actor_name = c.actor_name
       AND (l.quality_class <> c.quality_class 
       OR l.is_active <> c.is_active)
),
new_records AS (
    SELECT 
        c.actor_name,
        c.quality_class,
        c.is_active,
        c.year AS start_date,
        c.year AS end_date
    FROM current_year_data c
    LEFT JOIN last_scd_records l
        ON c.actor_name = l.actor_name
    WHERE l.actor_name IS NULL
),
deduplicated_inserts AS (
    SELECT DISTINCT * FROM unchanged_records
    UNION ALL
    SELECT DISTINCT * FROM changed_records
    UNION ALL
    SELECT DISTINCT * FROM new_records
)
    
INSERT INTO actor_history_scd (
actor_name, 
quality_class, 
is_active, 
start_date,
end_date)
SELECT *
FROM deduplicated_inserts
ON CONFLICT (actor_name, start_date) DO UPDATE
SET 
    quality_class = EXCLUDED.quality_class,
    is_active = EXCLUDED.is_active,
    end_date = EXCLUDED.end_date;
